<?php
require_once('./Services/UIComponent/classes/class.ilUserInterfaceHookPlugin.php');
require_once('./Services/MainMenu/classes/class.ilMainMenuGUI.php');
require_once('./Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/Subscription/classes/class.ilDynamicLanguage.php');
/**
 * Class ilVideoManagerPlugin
 *
 * @author Theodor Truffer <tt@studer-ramimann.ch>
 */
class ilVideoManagerPlugin extends ilUserInterfaceHookPlugin implements ilDynamicLanguageInterface {

	/**
	 * @return string
	 */
		public function getCsvPath() {
		$path = substr(__FILE__, 0, strpos(__FILE__, 'classes')) . 'lang/';
		if (file_exists($path . 'lang_custom.csv')) {
			$file = $path . 'lang_custom.csv';
		} else {
			$file = $path . 'lang.csv';
		}

		return $file;
	}


	/**
	 * @return string
	 */
	public function getAjaxLink() {
		return false;
	}


	/**
	 * @param $key
	 *
	 * @return mixed
	 */
	public function txt($key) {
		return ilDynamicLanguage::getInstance($this, ilDynamicLanguage::MODE_DEV)->txt($key);
	}








	/**
	 * @var ilSubscriptionPlugin
	 */
	protected static $instance;


	/**
	 * @return ilVideoManagerPlugin
	 */
	public static function getInstance() {
		if (! isset(self::$instance)) {
			self::$instance = new self();
		}

		return self::$instance;
	}


	/**
	 * @return string
	 */
	public function getPluginName() {
		return 'VideoManager';
	}


	/**
	 * @return bool
	 */
	public static function checkPreconditions() {
		require_once('class.videoman.php');
		videoman::loadActiveRecord();
		global $ilCtrl;
		if (! class_exists('ActiveRecord') OR $ilCtrl->lookupClassPath('ilUIPluginRouterGUI') === NULL) {
			return false;
		}

		return true;
	}


	/**
	 * @return bool
	 */
	public function beforeActivation() {
		global $ilPluginAdmin;
		/**
		 * @var ilPluginAdmin $ilPluginAdmin
		 */
		if (in_array('CtrlMainMenu', $ilPluginAdmin->getActivePluginsForSlot('Services', 'UIComponent', 'uihk'))) {
			require_once('./Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/CtrlMainMenu/classes/EntryTypes/Dropdown/class.ctrlmmEntryDropdown.php');
			require_once('./Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/CtrlMainMenu/classes/EntryTypes/Ctrl/class.ctrlmmEntryCtrl.php');

			$dropdown = new ctrlmmEntryDropdown();
			$dropdown->create();

			$trans = ctrlmmTranslation::_getInstanceForLanguageKey($dropdown->getId(), 'en');
			$trans->setTitle('Video-Manager');
			$trans->store();

			$admin = new ctrlmmEntryCtrl();
			$admin->setParent($dropdown->getId());
			$admin->setGuiClass('ilUIPluginRouterGUI,ilVideoManagerAdminGUI');
			$admin->create();

			$trans = ctrlmmTranslation::_getInstanceForLanguageKey($admin->getId(), 'en');
			$trans->setTitle('Administration');
			$trans->store();

			$admin = new ctrlmmEntryCtrl();
			$admin->setParent($dropdown->getId());
			$admin->setGuiClass('ilUIPluginRouterGUI,ilVideoManagerUserGUI');
			$admin->create();

			$trans = ctrlmmTranslation::_getInstanceForLanguageKey($admin->getId(), 'en');
			$trans->setTitle('Channels');
			$trans->store();
		}

		return self::checkPreconditions();
	}


	protected function afterActivation() {
		//		if(ilPl)
		//		parent::afterActivation(); // TODO: Change the autogenerated stub
	}


	/**
	 * @param $usr_id
	 *
	 * @return ilLanguage
	 */
	public function loadLanguageForUser($usr_id) {
		$lng = ilObjUser::_lookupLanguage($usr_id);
		$ilLanguage = new ilLanguage($lng);
		$ilLanguage->loadLanguageModule("ui_uihk_video_man");

		return $ilLanguage;
	}
}